#include <initializer_list>
#include <iostream>
#include <iterator>
#include <memory>
#include <sstream> // __str__
#include <string>
#include <vector>

#include <pybind11/pybind11.h>

#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>);
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*);
	PYBIND11_MAKE_OPAQUE(std::shared_ptr<void>);
#endif

void bind_std_stl_vector_5(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	std::cout << "B13_[std::vector<mmtf::Entity>] ";
	{ // std::vector file:bits/stl_vector.h line:216
		pybind11::class_<std::vector<mmtf::Entity>, std::shared_ptr<std::vector<mmtf::Entity>>> cl(M("std"), "vector_mmtf_Entity_t", "");
		pybind11::handle cl_type = cl;

		cl.def( pybind11::init( [](){ return new std::vector<mmtf::Entity>(); } ) );
		cl.def( pybind11::init<const class std::allocator<struct mmtf::Entity> &>(), pybind11::arg("__a") );

		cl.def( pybind11::init( [](unsigned long const & a0){ return new std::vector<mmtf::Entity>(a0); } ), "doc");
		cl.def( pybind11::init<unsigned long, const class std::allocator<struct mmtf::Entity> &>(), pybind11::arg("__n"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](unsigned long const & a0, const struct mmtf::Entity & a1){ return new std::vector<mmtf::Entity>(a0, a1); } ), "doc");
		cl.def( pybind11::init<unsigned long, const struct mmtf::Entity &, const class std::allocator<struct mmtf::Entity> &>(), pybind11::arg("__n"), pybind11::arg("__value"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](std::vector<mmtf::Entity> const &o){ return new std::vector<mmtf::Entity>(o); } ) );
		cl.def( pybind11::init<const class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > &, const class std::allocator<struct mmtf::Entity> &>(), pybind11::arg("__x"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](class std::initializer_list<struct mmtf::Entity> const & a0){ return new std::vector<mmtf::Entity>(a0); } ), "doc");
		cl.def( pybind11::init<class std::initializer_list<struct mmtf::Entity>, const class std::allocator<struct mmtf::Entity> &>(), pybind11::arg("__l"), pybind11::arg("__a") );

		cl.def("get_allocator", [](std::vector<mmtf::Entity> const &o) -> std::allocator<struct mmtf::Entity> { return o.get_allocator(); }, "");
		cl.def("assign", (class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > & (std::vector<mmtf::Entity>::*)(const class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > &)) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::operator=, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::operator=(const class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > &) --> class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > &", pybind11::return_value_policy::automatic, pybind11::arg("__x"));
		cl.def("assign", (class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > & (std::vector<mmtf::Entity>::*)(class std::initializer_list<struct mmtf::Entity>)) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::operator=, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::operator=(class std::initializer_list<struct mmtf::Entity>) --> class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > &", pybind11::return_value_policy::automatic, pybind11::arg("__l"));
		cl.def("assign", (void (std::vector<mmtf::Entity>::*)(unsigned long, const struct mmtf::Entity &)) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::assign, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::assign(unsigned long, const struct mmtf::Entity &) --> void", pybind11::arg("__n"), pybind11::arg("__val"));
		cl.def("assign", (void (std::vector<mmtf::Entity>::*)(class std::initializer_list<struct mmtf::Entity>)) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::assign, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::assign(class std::initializer_list<struct mmtf::Entity>) --> void", pybind11::arg("__l"));
		cl.def("begin", (class __gnu_cxx::__normal_iterator<struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > > (std::vector<mmtf::Entity>::*)()) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::begin, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::begin() --> class __gnu_cxx::__normal_iterator<struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >");
		cl.def("end", (class __gnu_cxx::__normal_iterator<struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > > (std::vector<mmtf::Entity>::*)()) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::end, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::end() --> class __gnu_cxx::__normal_iterator<struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >");
		cl.def("cbegin", (class __gnu_cxx::__normal_iterator<const struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > > (std::vector<mmtf::Entity>::*)() const) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::cbegin, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::cbegin() const --> class __gnu_cxx::__normal_iterator<const struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >");
		cl.def("cend", (class __gnu_cxx::__normal_iterator<const struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > > (std::vector<mmtf::Entity>::*)() const) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::cend, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::cend() const --> class __gnu_cxx::__normal_iterator<const struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >");
		cl.def("size", (unsigned long (std::vector<mmtf::Entity>::*)() const) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::size, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::size() const --> unsigned long");
		cl.def("max_size", (unsigned long (std::vector<mmtf::Entity>::*)() const) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::max_size, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::max_size() const --> unsigned long");
		cl.def("resize", (void (std::vector<mmtf::Entity>::*)(unsigned long)) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::resize, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::resize(unsigned long) --> void", pybind11::arg("__new_size"));
		cl.def("resize", (void (std::vector<mmtf::Entity>::*)(unsigned long, const struct mmtf::Entity &)) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::resize, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::resize(unsigned long, const struct mmtf::Entity &) --> void", pybind11::arg("__new_size"), pybind11::arg("__x"));
		cl.def("shrink_to_fit", (void (std::vector<mmtf::Entity>::*)()) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::shrink_to_fit, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::shrink_to_fit() --> void");
		cl.def("capacity", (unsigned long (std::vector<mmtf::Entity>::*)() const) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::capacity, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::capacity() const --> unsigned long");
		cl.def("empty", (bool (std::vector<mmtf::Entity>::*)() const) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::empty, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::empty() const --> bool");
		cl.def("reserve", (void (std::vector<mmtf::Entity>::*)(unsigned long)) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::reserve, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::reserve(unsigned long) --> void", pybind11::arg("__n"));
		cl.def("__getitem__", (struct mmtf::Entity & (std::vector<mmtf::Entity>::*)(unsigned long)) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::operator[], "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::operator[](unsigned long) --> struct mmtf::Entity &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
		cl.def("at", (struct mmtf::Entity & (std::vector<mmtf::Entity>::*)(unsigned long)) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::at, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::at(unsigned long) --> struct mmtf::Entity &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
		cl.def("front", (struct mmtf::Entity & (std::vector<mmtf::Entity>::*)()) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::front, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::front() --> struct mmtf::Entity &", pybind11::return_value_policy::automatic);
		cl.def("back", (struct mmtf::Entity & (std::vector<mmtf::Entity>::*)()) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::back, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::back() --> struct mmtf::Entity &", pybind11::return_value_policy::automatic);
		cl.def("data", (struct mmtf::Entity * (std::vector<mmtf::Entity>::*)()) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::data, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::data() --> struct mmtf::Entity *", pybind11::return_value_policy::automatic);
		cl.def("push_back", (void (std::vector<mmtf::Entity>::*)(const struct mmtf::Entity &)) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::push_back, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::push_back(const struct mmtf::Entity &) --> void", pybind11::arg("__x"));
		cl.def("pop_back", (void (std::vector<mmtf::Entity>::*)()) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::pop_back, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::pop_back() --> void");
		cl.def("insert", (class __gnu_cxx::__normal_iterator<struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > > (std::vector<mmtf::Entity>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >, const struct mmtf::Entity &)) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::insert, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::insert(class __gnu_cxx::__normal_iterator<const struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >, const struct mmtf::Entity &) --> class __gnu_cxx::__normal_iterator<struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >", pybind11::arg("__position"), pybind11::arg("__x"));
		cl.def("insert", (class __gnu_cxx::__normal_iterator<struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > > (std::vector<mmtf::Entity>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >, class std::initializer_list<struct mmtf::Entity>)) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::insert, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::insert(class __gnu_cxx::__normal_iterator<const struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >, class std::initializer_list<struct mmtf::Entity>) --> class __gnu_cxx::__normal_iterator<struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >", pybind11::arg("__position"), pybind11::arg("__l"));
		cl.def("insert", (class __gnu_cxx::__normal_iterator<struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > > (std::vector<mmtf::Entity>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >, unsigned long, const struct mmtf::Entity &)) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::insert, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::insert(class __gnu_cxx::__normal_iterator<const struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >, unsigned long, const struct mmtf::Entity &) --> class __gnu_cxx::__normal_iterator<struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >", pybind11::arg("__position"), pybind11::arg("__n"), pybind11::arg("__x"));
		cl.def("erase", (class __gnu_cxx::__normal_iterator<struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > > (std::vector<mmtf::Entity>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >)) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::erase, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::erase(class __gnu_cxx::__normal_iterator<const struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >) --> class __gnu_cxx::__normal_iterator<struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >", pybind11::arg("__position"));
		cl.def("erase", (class __gnu_cxx::__normal_iterator<struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > > (std::vector<mmtf::Entity>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >, class __gnu_cxx::__normal_iterator<const struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >)) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::erase, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::erase(class __gnu_cxx::__normal_iterator<const struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >, class __gnu_cxx::__normal_iterator<const struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >) --> class __gnu_cxx::__normal_iterator<struct mmtf::Entity *, class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > >", pybind11::arg("__first"), pybind11::arg("__last"));
		cl.def("swap", (void (std::vector<mmtf::Entity>::*)(class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > &)) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::swap, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::swap(class std::vector<struct mmtf::Entity, class std::allocator<struct mmtf::Entity> > &) --> void", pybind11::arg("__x"));
		cl.def("clear", (void (std::vector<mmtf::Entity>::*)()) &std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::clear, "C++: std::vector<mmtf::Entity, std::allocator<mmtf::Entity> >::clear() --> void");
	}
	std::cout << "B14_[std::vector<mmtf::GroupType>] ";
	{ // std::vector file:bits/stl_vector.h line:216
		pybind11::class_<std::vector<mmtf::GroupType>, std::shared_ptr<std::vector<mmtf::GroupType>>> cl(M("std"), "vector_mmtf_GroupType_t", "");
		pybind11::handle cl_type = cl;

		cl.def( pybind11::init( [](){ return new std::vector<mmtf::GroupType>(); } ) );
		cl.def( pybind11::init<const class std::allocator<struct mmtf::GroupType> &>(), pybind11::arg("__a") );

		cl.def( pybind11::init( [](unsigned long const & a0){ return new std::vector<mmtf::GroupType>(a0); } ), "doc");
		cl.def( pybind11::init<unsigned long, const class std::allocator<struct mmtf::GroupType> &>(), pybind11::arg("__n"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](unsigned long const & a0, const struct mmtf::GroupType & a1){ return new std::vector<mmtf::GroupType>(a0, a1); } ), "doc");
		cl.def( pybind11::init<unsigned long, const struct mmtf::GroupType &, const class std::allocator<struct mmtf::GroupType> &>(), pybind11::arg("__n"), pybind11::arg("__value"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](std::vector<mmtf::GroupType> const &o){ return new std::vector<mmtf::GroupType>(o); } ) );
		cl.def( pybind11::init<const class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > &, const class std::allocator<struct mmtf::GroupType> &>(), pybind11::arg("__x"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](class std::initializer_list<struct mmtf::GroupType> const & a0){ return new std::vector<mmtf::GroupType>(a0); } ), "doc");
		cl.def( pybind11::init<class std::initializer_list<struct mmtf::GroupType>, const class std::allocator<struct mmtf::GroupType> &>(), pybind11::arg("__l"), pybind11::arg("__a") );

		cl.def("get_allocator", [](std::vector<mmtf::GroupType> const &o) -> std::allocator<struct mmtf::GroupType> { return o.get_allocator(); }, "");
		cl.def("assign", (class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > & (std::vector<mmtf::GroupType>::*)(const class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > &)) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::operator=, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::operator=(const class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > &) --> class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > &", pybind11::return_value_policy::automatic, pybind11::arg("__x"));
		cl.def("assign", (class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > & (std::vector<mmtf::GroupType>::*)(class std::initializer_list<struct mmtf::GroupType>)) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::operator=, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::operator=(class std::initializer_list<struct mmtf::GroupType>) --> class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > &", pybind11::return_value_policy::automatic, pybind11::arg("__l"));
		cl.def("assign", (void (std::vector<mmtf::GroupType>::*)(unsigned long, const struct mmtf::GroupType &)) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::assign, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::assign(unsigned long, const struct mmtf::GroupType &) --> void", pybind11::arg("__n"), pybind11::arg("__val"));
		cl.def("assign", (void (std::vector<mmtf::GroupType>::*)(class std::initializer_list<struct mmtf::GroupType>)) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::assign, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::assign(class std::initializer_list<struct mmtf::GroupType>) --> void", pybind11::arg("__l"));
		cl.def("begin", (class __gnu_cxx::__normal_iterator<struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > > (std::vector<mmtf::GroupType>::*)()) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::begin, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::begin() --> class __gnu_cxx::__normal_iterator<struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >");
		cl.def("end", (class __gnu_cxx::__normal_iterator<struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > > (std::vector<mmtf::GroupType>::*)()) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::end, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::end() --> class __gnu_cxx::__normal_iterator<struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >");
		cl.def("cbegin", (class __gnu_cxx::__normal_iterator<const struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > > (std::vector<mmtf::GroupType>::*)() const) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::cbegin, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::cbegin() const --> class __gnu_cxx::__normal_iterator<const struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >");
		cl.def("cend", (class __gnu_cxx::__normal_iterator<const struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > > (std::vector<mmtf::GroupType>::*)() const) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::cend, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::cend() const --> class __gnu_cxx::__normal_iterator<const struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >");
		cl.def("size", (unsigned long (std::vector<mmtf::GroupType>::*)() const) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::size, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::size() const --> unsigned long");
		cl.def("max_size", (unsigned long (std::vector<mmtf::GroupType>::*)() const) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::max_size, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::max_size() const --> unsigned long");
		cl.def("resize", (void (std::vector<mmtf::GroupType>::*)(unsigned long)) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::resize, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::resize(unsigned long) --> void", pybind11::arg("__new_size"));
		cl.def("resize", (void (std::vector<mmtf::GroupType>::*)(unsigned long, const struct mmtf::GroupType &)) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::resize, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::resize(unsigned long, const struct mmtf::GroupType &) --> void", pybind11::arg("__new_size"), pybind11::arg("__x"));
		cl.def("shrink_to_fit", (void (std::vector<mmtf::GroupType>::*)()) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::shrink_to_fit, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::shrink_to_fit() --> void");
		cl.def("capacity", (unsigned long (std::vector<mmtf::GroupType>::*)() const) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::capacity, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::capacity() const --> unsigned long");
		cl.def("empty", (bool (std::vector<mmtf::GroupType>::*)() const) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::empty, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::empty() const --> bool");
		cl.def("reserve", (void (std::vector<mmtf::GroupType>::*)(unsigned long)) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::reserve, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::reserve(unsigned long) --> void", pybind11::arg("__n"));
		cl.def("__getitem__", (struct mmtf::GroupType & (std::vector<mmtf::GroupType>::*)(unsigned long)) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::operator[], "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::operator[](unsigned long) --> struct mmtf::GroupType &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
		cl.def("at", (struct mmtf::GroupType & (std::vector<mmtf::GroupType>::*)(unsigned long)) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::at, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::at(unsigned long) --> struct mmtf::GroupType &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
		cl.def("front", (struct mmtf::GroupType & (std::vector<mmtf::GroupType>::*)()) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::front, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::front() --> struct mmtf::GroupType &", pybind11::return_value_policy::automatic);
		cl.def("back", (struct mmtf::GroupType & (std::vector<mmtf::GroupType>::*)()) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::back, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::back() --> struct mmtf::GroupType &", pybind11::return_value_policy::automatic);
		cl.def("data", (struct mmtf::GroupType * (std::vector<mmtf::GroupType>::*)()) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::data, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::data() --> struct mmtf::GroupType *", pybind11::return_value_policy::automatic);
		cl.def("push_back", (void (std::vector<mmtf::GroupType>::*)(const struct mmtf::GroupType &)) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::push_back, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::push_back(const struct mmtf::GroupType &) --> void", pybind11::arg("__x"));
		cl.def("pop_back", (void (std::vector<mmtf::GroupType>::*)()) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::pop_back, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::pop_back() --> void");
		cl.def("insert", (class __gnu_cxx::__normal_iterator<struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > > (std::vector<mmtf::GroupType>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >, const struct mmtf::GroupType &)) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::insert, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::insert(class __gnu_cxx::__normal_iterator<const struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >, const struct mmtf::GroupType &) --> class __gnu_cxx::__normal_iterator<struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >", pybind11::arg("__position"), pybind11::arg("__x"));
		cl.def("insert", (class __gnu_cxx::__normal_iterator<struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > > (std::vector<mmtf::GroupType>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >, class std::initializer_list<struct mmtf::GroupType>)) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::insert, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::insert(class __gnu_cxx::__normal_iterator<const struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >, class std::initializer_list<struct mmtf::GroupType>) --> class __gnu_cxx::__normal_iterator<struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >", pybind11::arg("__position"), pybind11::arg("__l"));
		cl.def("insert", (class __gnu_cxx::__normal_iterator<struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > > (std::vector<mmtf::GroupType>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >, unsigned long, const struct mmtf::GroupType &)) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::insert, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::insert(class __gnu_cxx::__normal_iterator<const struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >, unsigned long, const struct mmtf::GroupType &) --> class __gnu_cxx::__normal_iterator<struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >", pybind11::arg("__position"), pybind11::arg("__n"), pybind11::arg("__x"));
		cl.def("erase", (class __gnu_cxx::__normal_iterator<struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > > (std::vector<mmtf::GroupType>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >)) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::erase, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::erase(class __gnu_cxx::__normal_iterator<const struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >) --> class __gnu_cxx::__normal_iterator<struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >", pybind11::arg("__position"));
		cl.def("erase", (class __gnu_cxx::__normal_iterator<struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > > (std::vector<mmtf::GroupType>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >, class __gnu_cxx::__normal_iterator<const struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >)) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::erase, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::erase(class __gnu_cxx::__normal_iterator<const struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >, class __gnu_cxx::__normal_iterator<const struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >) --> class __gnu_cxx::__normal_iterator<struct mmtf::GroupType *, class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > >", pybind11::arg("__first"), pybind11::arg("__last"));
		cl.def("swap", (void (std::vector<mmtf::GroupType>::*)(class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > &)) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::swap, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::swap(class std::vector<struct mmtf::GroupType, class std::allocator<struct mmtf::GroupType> > &) --> void", pybind11::arg("__x"));
		cl.def("clear", (void (std::vector<mmtf::GroupType>::*)()) &std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::clear, "C++: std::vector<mmtf::GroupType, std::allocator<mmtf::GroupType> >::clear() --> void");
	}
}
