#include <initializer_list>
#include <iostream>
#include <iterator>
#include <memory>
#include <sstream> // __str__
#include <string>
#include <vector>

#include <pybind11/pybind11.h>

#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>);
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*);
	PYBIND11_MAKE_OPAQUE(std::shared_ptr<void>);
#endif

void bind_std_stl_vector_2(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	std::cout << "B8_[std::vector<signed char>] ";
	{ // std::vector file:bits/stl_vector.h line:216
		pybind11::class_<std::vector<signed char>, std::shared_ptr<std::vector<signed char>>> cl(M("std"), "vector_signed_char_t", "");
		pybind11::handle cl_type = cl;

		cl.def( pybind11::init( [](){ return new std::vector<signed char>(); } ) );
		cl.def( pybind11::init<const class std::allocator<signed char> &>(), pybind11::arg("__a") );

		cl.def( pybind11::init( [](unsigned long const & a0){ return new std::vector<signed char>(a0); } ), "doc");
		cl.def( pybind11::init<unsigned long, const class std::allocator<signed char> &>(), pybind11::arg("__n"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](unsigned long const & a0, const signed char & a1){ return new std::vector<signed char>(a0, a1); } ), "doc");
		cl.def( pybind11::init<unsigned long, const signed char &, const class std::allocator<signed char> &>(), pybind11::arg("__n"), pybind11::arg("__value"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](std::vector<signed char> const &o){ return new std::vector<signed char>(o); } ) );
		cl.def( pybind11::init<const class std::vector<signed char, class std::allocator<signed char> > &, const class std::allocator<signed char> &>(), pybind11::arg("__x"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](class std::initializer_list<signed char> const & a0){ return new std::vector<signed char>(a0); } ), "doc");
		cl.def( pybind11::init<class std::initializer_list<signed char>, const class std::allocator<signed char> &>(), pybind11::arg("__l"), pybind11::arg("__a") );

		cl.def("get_allocator", [](std::vector<signed char> const &o) -> std::allocator<signed char> { return o.get_allocator(); }, "");
		cl.def("assign", (class std::vector<signed char, class std::allocator<signed char> > & (std::vector<signed char>::*)(const class std::vector<signed char, class std::allocator<signed char> > &)) &std::vector<signed char, std::allocator<signed char> >::operator=, "C++: std::vector<signed char, std::allocator<signed char> >::operator=(const class std::vector<signed char, class std::allocator<signed char> > &) --> class std::vector<signed char, class std::allocator<signed char> > &", pybind11::return_value_policy::automatic, pybind11::arg("__x"));
		cl.def("assign", (class std::vector<signed char, class std::allocator<signed char> > & (std::vector<signed char>::*)(class std::initializer_list<signed char>)) &std::vector<signed char, std::allocator<signed char> >::operator=, "C++: std::vector<signed char, std::allocator<signed char> >::operator=(class std::initializer_list<signed char>) --> class std::vector<signed char, class std::allocator<signed char> > &", pybind11::return_value_policy::automatic, pybind11::arg("__l"));
		cl.def("assign", (void (std::vector<signed char>::*)(unsigned long, const signed char &)) &std::vector<signed char, std::allocator<signed char> >::assign, "C++: std::vector<signed char, std::allocator<signed char> >::assign(unsigned long, const signed char &) --> void", pybind11::arg("__n"), pybind11::arg("__val"));
		cl.def("assign", (void (std::vector<signed char>::*)(class std::initializer_list<signed char>)) &std::vector<signed char, std::allocator<signed char> >::assign, "C++: std::vector<signed char, std::allocator<signed char> >::assign(class std::initializer_list<signed char>) --> void", pybind11::arg("__l"));
		cl.def("begin", (class __gnu_cxx::__normal_iterator<signed char *, class std::vector<signed char, class std::allocator<signed char> > > (std::vector<signed char>::*)()) &std::vector<signed char, std::allocator<signed char> >::begin, "C++: std::vector<signed char, std::allocator<signed char> >::begin() --> class __gnu_cxx::__normal_iterator<signed char *, class std::vector<signed char, class std::allocator<signed char> > >");
		cl.def("end", (class __gnu_cxx::__normal_iterator<signed char *, class std::vector<signed char, class std::allocator<signed char> > > (std::vector<signed char>::*)()) &std::vector<signed char, std::allocator<signed char> >::end, "C++: std::vector<signed char, std::allocator<signed char> >::end() --> class __gnu_cxx::__normal_iterator<signed char *, class std::vector<signed char, class std::allocator<signed char> > >");
		cl.def("cbegin", (class __gnu_cxx::__normal_iterator<const signed char *, class std::vector<signed char, class std::allocator<signed char> > > (std::vector<signed char>::*)() const) &std::vector<signed char, std::allocator<signed char> >::cbegin, "C++: std::vector<signed char, std::allocator<signed char> >::cbegin() const --> class __gnu_cxx::__normal_iterator<const signed char *, class std::vector<signed char, class std::allocator<signed char> > >");
		cl.def("cend", (class __gnu_cxx::__normal_iterator<const signed char *, class std::vector<signed char, class std::allocator<signed char> > > (std::vector<signed char>::*)() const) &std::vector<signed char, std::allocator<signed char> >::cend, "C++: std::vector<signed char, std::allocator<signed char> >::cend() const --> class __gnu_cxx::__normal_iterator<const signed char *, class std::vector<signed char, class std::allocator<signed char> > >");
		cl.def("size", (unsigned long (std::vector<signed char>::*)() const) &std::vector<signed char, std::allocator<signed char> >::size, "C++: std::vector<signed char, std::allocator<signed char> >::size() const --> unsigned long");
		cl.def("max_size", (unsigned long (std::vector<signed char>::*)() const) &std::vector<signed char, std::allocator<signed char> >::max_size, "C++: std::vector<signed char, std::allocator<signed char> >::max_size() const --> unsigned long");
		cl.def("resize", (void (std::vector<signed char>::*)(unsigned long)) &std::vector<signed char, std::allocator<signed char> >::resize, "C++: std::vector<signed char, std::allocator<signed char> >::resize(unsigned long) --> void", pybind11::arg("__new_size"));
		cl.def("resize", (void (std::vector<signed char>::*)(unsigned long, const signed char &)) &std::vector<signed char, std::allocator<signed char> >::resize, "C++: std::vector<signed char, std::allocator<signed char> >::resize(unsigned long, const signed char &) --> void", pybind11::arg("__new_size"), pybind11::arg("__x"));
		cl.def("shrink_to_fit", (void (std::vector<signed char>::*)()) &std::vector<signed char, std::allocator<signed char> >::shrink_to_fit, "C++: std::vector<signed char, std::allocator<signed char> >::shrink_to_fit() --> void");
		cl.def("capacity", (unsigned long (std::vector<signed char>::*)() const) &std::vector<signed char, std::allocator<signed char> >::capacity, "C++: std::vector<signed char, std::allocator<signed char> >::capacity() const --> unsigned long");
		cl.def("empty", (bool (std::vector<signed char>::*)() const) &std::vector<signed char, std::allocator<signed char> >::empty, "C++: std::vector<signed char, std::allocator<signed char> >::empty() const --> bool");
		cl.def("reserve", (void (std::vector<signed char>::*)(unsigned long)) &std::vector<signed char, std::allocator<signed char> >::reserve, "C++: std::vector<signed char, std::allocator<signed char> >::reserve(unsigned long) --> void", pybind11::arg("__n"));
		cl.def("__getitem__", (signed char & (std::vector<signed char>::*)(unsigned long)) &std::vector<signed char, std::allocator<signed char> >::operator[], "C++: std::vector<signed char, std::allocator<signed char> >::operator[](unsigned long) --> signed char &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
		cl.def("at", (signed char & (std::vector<signed char>::*)(unsigned long)) &std::vector<signed char, std::allocator<signed char> >::at, "C++: std::vector<signed char, std::allocator<signed char> >::at(unsigned long) --> signed char &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
		cl.def("front", (signed char & (std::vector<signed char>::*)()) &std::vector<signed char, std::allocator<signed char> >::front, "C++: std::vector<signed char, std::allocator<signed char> >::front() --> signed char &", pybind11::return_value_policy::automatic);
		cl.def("back", (signed char & (std::vector<signed char>::*)()) &std::vector<signed char, std::allocator<signed char> >::back, "C++: std::vector<signed char, std::allocator<signed char> >::back() --> signed char &", pybind11::return_value_policy::automatic);
		cl.def("data", (signed char * (std::vector<signed char>::*)()) &std::vector<signed char, std::allocator<signed char> >::data, "C++: std::vector<signed char, std::allocator<signed char> >::data() --> signed char *", pybind11::return_value_policy::automatic);
		cl.def("push_back", (void (std::vector<signed char>::*)(const signed char &)) &std::vector<signed char, std::allocator<signed char> >::push_back, "C++: std::vector<signed char, std::allocator<signed char> >::push_back(const signed char &) --> void", pybind11::arg("__x"));
		cl.def("pop_back", (void (std::vector<signed char>::*)()) &std::vector<signed char, std::allocator<signed char> >::pop_back, "C++: std::vector<signed char, std::allocator<signed char> >::pop_back() --> void");
		cl.def("insert", (class __gnu_cxx::__normal_iterator<signed char *, class std::vector<signed char, class std::allocator<signed char> > > (std::vector<signed char>::*)(class __gnu_cxx::__normal_iterator<const signed char *, class std::vector<signed char, class std::allocator<signed char> > >, const signed char &)) &std::vector<signed char, std::allocator<signed char> >::insert, "C++: std::vector<signed char, std::allocator<signed char> >::insert(class __gnu_cxx::__normal_iterator<const signed char *, class std::vector<signed char, class std::allocator<signed char> > >, const signed char &) --> class __gnu_cxx::__normal_iterator<signed char *, class std::vector<signed char, class std::allocator<signed char> > >", pybind11::arg("__position"), pybind11::arg("__x"));
		cl.def("insert", (class __gnu_cxx::__normal_iterator<signed char *, class std::vector<signed char, class std::allocator<signed char> > > (std::vector<signed char>::*)(class __gnu_cxx::__normal_iterator<const signed char *, class std::vector<signed char, class std::allocator<signed char> > >, class std::initializer_list<signed char>)) &std::vector<signed char, std::allocator<signed char> >::insert, "C++: std::vector<signed char, std::allocator<signed char> >::insert(class __gnu_cxx::__normal_iterator<const signed char *, class std::vector<signed char, class std::allocator<signed char> > >, class std::initializer_list<signed char>) --> class __gnu_cxx::__normal_iterator<signed char *, class std::vector<signed char, class std::allocator<signed char> > >", pybind11::arg("__position"), pybind11::arg("__l"));
		cl.def("insert", (class __gnu_cxx::__normal_iterator<signed char *, class std::vector<signed char, class std::allocator<signed char> > > (std::vector<signed char>::*)(class __gnu_cxx::__normal_iterator<const signed char *, class std::vector<signed char, class std::allocator<signed char> > >, unsigned long, const signed char &)) &std::vector<signed char, std::allocator<signed char> >::insert, "C++: std::vector<signed char, std::allocator<signed char> >::insert(class __gnu_cxx::__normal_iterator<const signed char *, class std::vector<signed char, class std::allocator<signed char> > >, unsigned long, const signed char &) --> class __gnu_cxx::__normal_iterator<signed char *, class std::vector<signed char, class std::allocator<signed char> > >", pybind11::arg("__position"), pybind11::arg("__n"), pybind11::arg("__x"));
		cl.def("erase", (class __gnu_cxx::__normal_iterator<signed char *, class std::vector<signed char, class std::allocator<signed char> > > (std::vector<signed char>::*)(class __gnu_cxx::__normal_iterator<const signed char *, class std::vector<signed char, class std::allocator<signed char> > >)) &std::vector<signed char, std::allocator<signed char> >::erase, "C++: std::vector<signed char, std::allocator<signed char> >::erase(class __gnu_cxx::__normal_iterator<const signed char *, class std::vector<signed char, class std::allocator<signed char> > >) --> class __gnu_cxx::__normal_iterator<signed char *, class std::vector<signed char, class std::allocator<signed char> > >", pybind11::arg("__position"));
		cl.def("erase", (class __gnu_cxx::__normal_iterator<signed char *, class std::vector<signed char, class std::allocator<signed char> > > (std::vector<signed char>::*)(class __gnu_cxx::__normal_iterator<const signed char *, class std::vector<signed char, class std::allocator<signed char> > >, class __gnu_cxx::__normal_iterator<const signed char *, class std::vector<signed char, class std::allocator<signed char> > >)) &std::vector<signed char, std::allocator<signed char> >::erase, "C++: std::vector<signed char, std::allocator<signed char> >::erase(class __gnu_cxx::__normal_iterator<const signed char *, class std::vector<signed char, class std::allocator<signed char> > >, class __gnu_cxx::__normal_iterator<const signed char *, class std::vector<signed char, class std::allocator<signed char> > >) --> class __gnu_cxx::__normal_iterator<signed char *, class std::vector<signed char, class std::allocator<signed char> > >", pybind11::arg("__first"), pybind11::arg("__last"));
		cl.def("swap", (void (std::vector<signed char>::*)(class std::vector<signed char, class std::allocator<signed char> > &)) &std::vector<signed char, std::allocator<signed char> >::swap, "C++: std::vector<signed char, std::allocator<signed char> >::swap(class std::vector<signed char, class std::allocator<signed char> > &) --> void", pybind11::arg("__x"));
		cl.def("clear", (void (std::vector<signed char>::*)()) &std::vector<signed char, std::allocator<signed char> >::clear, "C++: std::vector<signed char, std::allocator<signed char> >::clear() --> void");
	}
	std::cout << "B9_[std::vector<mmtf::Transform>] ";
	{ // std::vector file:bits/stl_vector.h line:216
		pybind11::class_<std::vector<mmtf::Transform>, std::shared_ptr<std::vector<mmtf::Transform>>> cl(M("std"), "vector_mmtf_Transform_t", "");
		pybind11::handle cl_type = cl;

		cl.def( pybind11::init( [](){ return new std::vector<mmtf::Transform>(); } ) );
		cl.def( pybind11::init<const class std::allocator<struct mmtf::Transform> &>(), pybind11::arg("__a") );

		cl.def( pybind11::init( [](unsigned long const & a0){ return new std::vector<mmtf::Transform>(a0); } ), "doc");
		cl.def( pybind11::init<unsigned long, const class std::allocator<struct mmtf::Transform> &>(), pybind11::arg("__n"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](unsigned long const & a0, const struct mmtf::Transform & a1){ return new std::vector<mmtf::Transform>(a0, a1); } ), "doc");
		cl.def( pybind11::init<unsigned long, const struct mmtf::Transform &, const class std::allocator<struct mmtf::Transform> &>(), pybind11::arg("__n"), pybind11::arg("__value"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](std::vector<mmtf::Transform> const &o){ return new std::vector<mmtf::Transform>(o); } ) );
		cl.def( pybind11::init<const class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > &, const class std::allocator<struct mmtf::Transform> &>(), pybind11::arg("__x"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](class std::initializer_list<struct mmtf::Transform> const & a0){ return new std::vector<mmtf::Transform>(a0); } ), "doc");
		cl.def( pybind11::init<class std::initializer_list<struct mmtf::Transform>, const class std::allocator<struct mmtf::Transform> &>(), pybind11::arg("__l"), pybind11::arg("__a") );

		cl.def("get_allocator", [](std::vector<mmtf::Transform> const &o) -> std::allocator<struct mmtf::Transform> { return o.get_allocator(); }, "");
		cl.def("assign", (class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > & (std::vector<mmtf::Transform>::*)(const class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > &)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::operator=, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::operator=(const class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > &) --> class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > &", pybind11::return_value_policy::automatic, pybind11::arg("__x"));
		cl.def("assign", (class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > & (std::vector<mmtf::Transform>::*)(class std::initializer_list<struct mmtf::Transform>)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::operator=, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::operator=(class std::initializer_list<struct mmtf::Transform>) --> class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > &", pybind11::return_value_policy::automatic, pybind11::arg("__l"));
		cl.def("assign", (void (std::vector<mmtf::Transform>::*)(unsigned long, const struct mmtf::Transform &)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::assign, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::assign(unsigned long, const struct mmtf::Transform &) --> void", pybind11::arg("__n"), pybind11::arg("__val"));
		cl.def("assign", (void (std::vector<mmtf::Transform>::*)(class std::initializer_list<struct mmtf::Transform>)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::assign, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::assign(class std::initializer_list<struct mmtf::Transform>) --> void", pybind11::arg("__l"));
		cl.def("begin", (class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)()) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::begin, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::begin() --> class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >");
		cl.def("end", (class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)()) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::end, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::end() --> class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >");
		cl.def("cbegin", (class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)() const) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::cbegin, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::cbegin() const --> class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >");
		cl.def("cend", (class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)() const) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::cend, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::cend() const --> class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >");
		cl.def("size", (unsigned long (std::vector<mmtf::Transform>::*)() const) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::size, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::size() const --> unsigned long");
		cl.def("max_size", (unsigned long (std::vector<mmtf::Transform>::*)() const) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::max_size, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::max_size() const --> unsigned long");
		cl.def("resize", (void (std::vector<mmtf::Transform>::*)(unsigned long)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::resize, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::resize(unsigned long) --> void", pybind11::arg("__new_size"));
		cl.def("resize", (void (std::vector<mmtf::Transform>::*)(unsigned long, const struct mmtf::Transform &)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::resize, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::resize(unsigned long, const struct mmtf::Transform &) --> void", pybind11::arg("__new_size"), pybind11::arg("__x"));
		cl.def("shrink_to_fit", (void (std::vector<mmtf::Transform>::*)()) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::shrink_to_fit, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::shrink_to_fit() --> void");
		cl.def("capacity", (unsigned long (std::vector<mmtf::Transform>::*)() const) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::capacity, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::capacity() const --> unsigned long");
		cl.def("empty", (bool (std::vector<mmtf::Transform>::*)() const) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::empty, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::empty() const --> bool");
		cl.def("reserve", (void (std::vector<mmtf::Transform>::*)(unsigned long)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::reserve, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::reserve(unsigned long) --> void", pybind11::arg("__n"));
		cl.def("__getitem__", (struct mmtf::Transform & (std::vector<mmtf::Transform>::*)(unsigned long)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::operator[], "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::operator[](unsigned long) --> struct mmtf::Transform &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
		cl.def("at", (struct mmtf::Transform & (std::vector<mmtf::Transform>::*)(unsigned long)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::at, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::at(unsigned long) --> struct mmtf::Transform &", pybind11::return_value_policy::automatic, pybind11::arg("__n"));
		cl.def("front", (struct mmtf::Transform & (std::vector<mmtf::Transform>::*)()) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::front, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::front() --> struct mmtf::Transform &", pybind11::return_value_policy::automatic);
		cl.def("back", (struct mmtf::Transform & (std::vector<mmtf::Transform>::*)()) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::back, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::back() --> struct mmtf::Transform &", pybind11::return_value_policy::automatic);
		cl.def("data", (struct mmtf::Transform * (std::vector<mmtf::Transform>::*)()) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::data, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::data() --> struct mmtf::Transform *", pybind11::return_value_policy::automatic);
		cl.def("push_back", (void (std::vector<mmtf::Transform>::*)(const struct mmtf::Transform &)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::push_back, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::push_back(const struct mmtf::Transform &) --> void", pybind11::arg("__x"));
		cl.def("pop_back", (void (std::vector<mmtf::Transform>::*)()) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::pop_back, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::pop_back() --> void");
		cl.def("insert", (class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >, const struct mmtf::Transform &)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::insert, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::insert(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >, const struct mmtf::Transform &) --> class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >", pybind11::arg("__position"), pybind11::arg("__x"));
		cl.def("insert", (class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >, class std::initializer_list<struct mmtf::Transform>)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::insert, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::insert(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >, class std::initializer_list<struct mmtf::Transform>) --> class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >", pybind11::arg("__position"), pybind11::arg("__l"));
		cl.def("insert", (class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >, unsigned long, const struct mmtf::Transform &)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::insert, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::insert(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >, unsigned long, const struct mmtf::Transform &) --> class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >", pybind11::arg("__position"), pybind11::arg("__n"), pybind11::arg("__x"));
		cl.def("erase", (class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::erase, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::erase(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >) --> class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >", pybind11::arg("__position"));
		cl.def("erase", (class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > > (std::vector<mmtf::Transform>::*)(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >, class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::erase, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::erase(class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >, class __gnu_cxx::__normal_iterator<const struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >) --> class __gnu_cxx::__normal_iterator<struct mmtf::Transform *, class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > >", pybind11::arg("__first"), pybind11::arg("__last"));
		cl.def("swap", (void (std::vector<mmtf::Transform>::*)(class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > &)) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::swap, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::swap(class std::vector<struct mmtf::Transform, class std::allocator<struct mmtf::Transform> > &) --> void", pybind11::arg("__x"));
		cl.def("clear", (void (std::vector<mmtf::Transform>::*)()) &std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::clear, "C++: std::vector<mmtf::Transform, std::allocator<mmtf::Transform> >::clear() --> void");
	}
}
